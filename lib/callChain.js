// Generated by CoffeeScript 1.6.2
var CallChain, async, events, flatstack, flatten, toarray,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

flatstack = require("flatstack");

events = require("events");

async = require("async");

toarray = require("toarray");

flatten = require("flatten");

CallChain = (function(_super) {
  __extends(CallChain, _super);

  /*
  */


  function CallChain(options) {
    this._error = __bind(this._error, this);
    var methodName;

    this.fasten = options.fasten, this.target = options.target, this.methods = options.methods, this.type = options.type;
    this._callstack = this.fasten._callstack;
    for (methodName in this.methods) {
      this._addMethod(methodName, this.methods[methodName]);
    }
  }

  /*
  */


  CallChain.prototype._addMethod = function(name, options) {
    var map, onCall, onResult, type,
      _this = this;

    type = options.type || this.type;
    map = options.map || function(result) {
      return result;
    };
    onResult = options.onResult || function() {};
    onCall = options.onCall || function() {};
    return this[name] = function() {
      var args, callChain;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      callChain = _this.fasten.wrap(type);
      callChain.parent = _this;
      _this._callstack.push(function(next) {
        return setTimeout((function() {
          var targets;

          targets = toarray(_this.target);
          return async.mapSeries(targets, (function(target, next) {
            var call;

            _this._bubble("call", {
              chain: _this,
              type: _this.type,
              method: name,
              target: target
            });
            onCall(target);
            call = options.call || target[name];
            return call.apply(target, args.concat(function(err, result) {
              if (err != null) {
                return next(err);
              }
              _this._bubble("result", {
                chain: _this,
                type: _this.type,
                target: target,
                method: name,
                data: result
              });
              onResult(result);
              return next(null, map.call(target, result));
            }));
          }), function(err, newTarget) {
            if (err) {
              return _this._error(err);
            }
            callChain.target = flatten(newTarget);
            return next();
          });
        }), 1);
      });
      return callChain;
    };
  };

  /*
  */


  CallChain.prototype.root = function() {
    var p;

    p = this;
    while (p.parent) {
      p = p.parent;
    }
    return p;
  };

  /*
  */


  CallChain.prototype.bubble = function() {
    var _ref;

    this.emit.apply(this, arguments);
    return (_ref = this.parent) != null ? _ref.bubble.apply(_ref, arguments) : void 0;
  };

  /*
  */


  CallChain.prototype._bubble = function() {
    var _ref;

    (_ref = this.fasten).emit.apply(_ref, arguments);
    return this.bubble.apply(this, arguments);
  };

  /*
  */


  CallChain.prototype.then = function(next) {
    var _this = this;

    this._callstack.push(function() {
      return next(null, _this.target);
    });
    return this;
  };

  /*
  */


  CallChain.prototype._error = function(err) {
    return this.emit("error", err);
  };

  return CallChain;

})(events.EventEmitter);

module.exports = CallChain;
