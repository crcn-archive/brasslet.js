// Generated by CoffeeScript 1.7.0
var CallChain, Fasten, bindable, events, flatstack, type, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CallChain = require("./callChain");

flatstack = require("flatstack");

type = require("type-component");

events = require("events");

_ = require("underscore");

bindable = require("bindable");

Fasten = (function(_super) {
  __extends(Fasten, _super);


  /*
   */

  function Fasten() {
    this._callChainOptions = new bindable.Object();
  }


  /*
   */

  Fasten.prototype.add = function(name, options) {
    this._callChainOptions.set(name, options);
    return this;
  };


  /*
   */

  Fasten.prototype.options = function() {
    return this._callChainOptions.context();
  };


  /*
   */

  Fasten.prototype.all = function(options) {
    var ctx, key, key2, _results;
    ctx = this._callChainOptions.context();
    _results = [];
    for (key in ctx) {
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (key2 in options) {
          _results1.push(this._callChainOptions.set(key + "." + key2, options[key2]));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };


  /*
   */

  Fasten.prototype.wrap = function(type, target, callstack) {
    return new CallChain({
      fasten: this,
      type: type,
      target: target,
      methods: this._callChainOptions.get(type),
      callstack: callstack != null ? callstack : flatstack()
    });
  };

  return Fasten;

})(events.EventEmitter);

module.exports = function() {
  return new Fasten();
};
